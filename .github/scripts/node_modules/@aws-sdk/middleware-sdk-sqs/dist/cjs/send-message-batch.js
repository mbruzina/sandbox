"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSendMessageBatchPlugin = exports.sendMessageBatchMiddlewareOptions = exports.sendMessageBatchMiddleware = void 0;
const util_hex_encoding_1 = require("@aws-sdk/util-hex-encoding");
const sendMessageBatchMiddleware = (options) => (next) => async (args) => {
    const resp = await next({ ...args });
    const output = resp.output;
    const messageIds = [];
    const entries = {};
    if (output.Successful !== undefined) {
        for (const entry of output.Successful) {
            if (entry.Id !== undefined) {
                entries[entry.Id] = entry;
            }
        }
    }
    for (const entry of args.input.Entries) {
        if (entries[entry.Id]) {
            const md5 = entries[entry.Id].MD5OfMessageBody;
            const hash = new options.md5();
            hash.update(entry.MessageBody || "");
            if (md5 !== util_hex_encoding_1.toHex(await hash.digest())) {
                messageIds.push(entries[entry.Id].MessageId);
            }
        }
    }
    if (messageIds.length > 0) {
        throw new Error("Invalid MD5 checksum on messages: " + messageIds.join(", "));
    }
    return resp;
};
exports.sendMessageBatchMiddleware = sendMessageBatchMiddleware;
exports.sendMessageBatchMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BODY_MD5"],
    name: "sendMessageBatchMiddleware",
    override: true,
};
const getSendMessageBatchPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(exports.sendMessageBatchMiddleware(config), exports.sendMessageBatchMiddlewareOptions);
    },
});
exports.getSendMessageBatchPlugin = getSendMessageBatchPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZC1tZXNzYWdlLWJhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlbmQtbWVzc2FnZS1iYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSxrRUFBbUQ7QUFjNUMsTUFBTSwwQkFBMEIsR0FDckMsQ0FBQyxPQUEyQixFQUFrQyxFQUFFLENBQ2hFLENBQWdDLElBQW9DLEVBQWtDLEVBQUUsQ0FDeEcsS0FBSyxFQUFFLElBQXFDLEVBQTRDLEVBQUU7SUFDeEYsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQTJDLENBQUM7SUFDaEUsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLE1BQU0sT0FBTyxHQUFxRCxFQUFFLENBQUM7SUFDckUsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtRQUNuQyxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDckMsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLFNBQVMsRUFBRTtnQkFDMUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDM0I7U0FDRjtLQUNGO0lBQ0QsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUN0QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDckIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztZQUMvQyxNQUFNLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDLENBQUM7WUFDckMsSUFBSSxHQUFHLEtBQUsseUJBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUN0QyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDOUM7U0FDRjtLQUNGO0lBQ0QsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUMvRTtJQUVELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBOUJTLFFBQUEsMEJBQTBCLDhCQThCbkM7QUFFUyxRQUFBLGlDQUFpQyxHQUE2QjtJQUN6RSxJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztJQUMzQixJQUFJLEVBQUUsNEJBQTRCO0lBQ2xDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxNQUEwQixFQUF1QixFQUFFLENBQUMsQ0FBQztJQUM3RixZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLGtDQUEwQixDQUFDLE1BQU0sQ0FBQyxFQUFFLHlDQUFpQyxDQUFDLENBQUM7SUFDekYsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEseUJBQXlCLDZCQUluQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1oZXgtZW5jb2RpbmdcIjtcblxuaW1wb3J0IHsgUHJldmlvdXNseVJlc29sdmVkIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvbnNcIjtcblxuaW50ZXJmYWNlIFNlbmRNZXNzYWdlQmF0Y2hSZXN1bHQge1xuICBTdWNjZXNzZnVsOiBBcnJheTxTZW5kTWVzc2FnZUJhdGNoUmVzdWx0RW50cnk+IHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgU2VuZE1lc3NhZ2VCYXRjaFJlc3VsdEVudHJ5IHtcbiAgSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgTUQ1T2ZNZXNzYWdlQm9keTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBNZXNzYWdlSWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlbmRNZXNzYWdlQmF0Y2hNaWRkbGV3YXJlID1cbiAgKG9wdGlvbnM6IFByZXZpb3VzbHlSZXNvbHZlZCk6IEluaXRpYWxpemVNaWRkbGV3YXJlPGFueSwgYW55PiA9PlxuICA8T3V0cHV0IGV4dGVuZHMgTWV0YWRhdGFCZWFyZXI+KG5leHQ6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0Pik6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PiA9PlxuICBhc3luYyAoYXJnczogSW5pdGlhbGl6ZUhhbmRsZXJBcmd1bWVudHM8YW55Pik6IFByb21pc2U8SW5pdGlhbGl6ZUhhbmRsZXJPdXRwdXQ8T3V0cHV0Pj4gPT4ge1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBuZXh0KHsgLi4uYXJncyB9KTtcbiAgICBjb25zdCBvdXRwdXQgPSByZXNwLm91dHB1dCBhcyB1bmtub3duIGFzIFNlbmRNZXNzYWdlQmF0Y2hSZXN1bHQ7XG4gICAgY29uc3QgbWVzc2FnZUlkcyA9IFtdO1xuICAgIGNvbnN0IGVudHJpZXM6IHsgW2luZGV4OiBzdHJpbmddOiBTZW5kTWVzc2FnZUJhdGNoUmVzdWx0RW50cnkgfSA9IHt9O1xuICAgIGlmIChvdXRwdXQuU3VjY2Vzc2Z1bCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG91dHB1dC5TdWNjZXNzZnVsKSB7XG4gICAgICAgIGlmIChlbnRyeS5JZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW50cmllc1tlbnRyeS5JZF0gPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGFyZ3MuaW5wdXQuRW50cmllcykge1xuICAgICAgaWYgKGVudHJpZXNbZW50cnkuSWRdKSB7XG4gICAgICAgIGNvbnN0IG1kNSA9IGVudHJpZXNbZW50cnkuSWRdLk1ENU9mTWVzc2FnZUJvZHk7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBuZXcgb3B0aW9ucy5tZDUoKTtcbiAgICAgICAgaGFzaC51cGRhdGUoZW50cnkuTWVzc2FnZUJvZHkgfHwgXCJcIik7XG4gICAgICAgIGlmIChtZDUgIT09IHRvSGV4KGF3YWl0IGhhc2guZGlnZXN0KCkpKSB7XG4gICAgICAgICAgbWVzc2FnZUlkcy5wdXNoKGVudHJpZXNbZW50cnkuSWRdLk1lc3NhZ2VJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1lc3NhZ2VJZHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBNRDUgY2hlY2tzdW0gb24gbWVzc2FnZXM6IFwiICsgbWVzc2FnZUlkcy5qb2luKFwiLCBcIikpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNwO1xuICB9O1xuXG5leHBvcnQgY29uc3Qgc2VuZE1lc3NhZ2VCYXRjaE1pZGRsZXdhcmVPcHRpb25zOiBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICB0YWdzOiBbXCJWQUxJREFURV9CT0RZX01ENVwiXSxcbiAgbmFtZTogXCJzZW5kTWVzc2FnZUJhdGNoTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRTZW5kTWVzc2FnZUJhdGNoUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZChzZW5kTWVzc2FnZUJhdGNoTWlkZGxld2FyZShjb25maWcpLCBzZW5kTWVzc2FnZUJhdGNoTWlkZGxld2FyZU9wdGlvbnMpO1xuICB9LFxufSk7XG4iXX0=