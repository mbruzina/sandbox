"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReceiveMessagePlugin = exports.receiveMessageMiddlewareOptions = exports.receiveMessageMiddleware = void 0;
const util_hex_encoding_1 = require("@aws-sdk/util-hex-encoding");
function receiveMessageMiddleware(options) {
    return (next) => async (args) => {
        const resp = await next({ ...args });
        const output = resp.output;
        const messageIds = [];
        if (output.Messages !== undefined) {
            for (const message of output.Messages) {
                const md5 = message.MD5OfBody;
                const hash = new options.md5();
                hash.update(message.Body || "");
                if (md5 !== util_hex_encoding_1.toHex(await hash.digest())) {
                    messageIds.push(message.MessageId);
                }
            }
        }
        if (messageIds.length > 0) {
            throw new Error("Invalid MD5 checksum on messages: " + messageIds.join(", "));
        }
        return resp;
    };
}
exports.receiveMessageMiddleware = receiveMessageMiddleware;
exports.receiveMessageMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BODY_MD5"],
    name: "receiveMessageMiddleware",
    override: true,
};
const getReceiveMessagePlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.add(receiveMessageMiddleware(config), exports.receiveMessageMiddlewareOptions);
    },
});
exports.getReceiveMessagePlugin = getReceiveMessagePlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjZWl2ZS1tZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3JlY2VpdmUtbWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFTQSxrRUFBbUQ7QUFjbkQsU0FBZ0Isd0JBQXdCLENBQUMsT0FBMkI7SUFDbEUsT0FBTyxDQUFnQyxJQUFvQyxFQUFrQyxFQUFFLENBQzdHLEtBQUssRUFBRSxJQUFxQyxFQUE0QyxFQUFFO1FBQ3hGLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUF5QyxDQUFDO1FBQzlELE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQ2pDLEtBQUssTUFBTSxPQUFPLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDckMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztnQkFDOUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxHQUFHLEtBQUsseUJBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO29CQUN0QyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztpQkFDcEM7YUFDRjtTQUNGO1FBQ0QsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMvRTtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQXRCRCw0REFzQkM7QUFFWSxRQUFBLCtCQUErQixHQUE2QjtJQUN2RSxJQUFJLEVBQUUsWUFBWTtJQUNsQixJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztJQUMzQixJQUFJLEVBQUUsMEJBQTBCO0lBQ2hDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVLLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxNQUEwQixFQUF1QixFQUFFLENBQUMsQ0FBQztJQUMzRixZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxFQUFFLHVDQUErQixDQUFDLENBQUM7SUFDckYsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUpVLFFBQUEsdUJBQXVCLDJCQUlqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluaXRpYWxpemVIYW5kbGVyLFxuICBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50cyxcbiAgSW5pdGlhbGl6ZUhhbmRsZXJPcHRpb25zLFxuICBJbml0aWFsaXplSGFuZGxlck91dHB1dCxcbiAgSW5pdGlhbGl6ZU1pZGRsZXdhcmUsXG4gIE1ldGFkYXRhQmVhcmVyLFxuICBQbHVnZ2FibGUsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1oZXgtZW5jb2RpbmdcIjtcblxuaW1wb3J0IHsgUHJldmlvdXNseVJlc29sdmVkIH0gZnJvbSBcIi4vY29uZmlndXJhdGlvbnNcIjtcblxuaW50ZXJmYWNlIFJlY2VpdmVNZXNzYWdlUmVzdWx0IHtcbiAgTWVzc2FnZXM6IEFycmF5PE1lc3NhZ2U+O1xufVxuXG5pbnRlcmZhY2UgTWVzc2FnZSB7XG4gIEJvZHk6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgTUQ1T2ZCb2R5OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIE1lc3NhZ2VJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVjZWl2ZU1lc3NhZ2VNaWRkbGV3YXJlKG9wdGlvbnM6IFByZXZpb3VzbHlSZXNvbHZlZCk6IEluaXRpYWxpemVNaWRkbGV3YXJlPGFueSwgYW55PiB7XG4gIHJldHVybiA8T3V0cHV0IGV4dGVuZHMgTWV0YWRhdGFCZWFyZXI+KG5leHQ6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0Pik6IEluaXRpYWxpemVIYW5kbGVyPGFueSwgT3V0cHV0PiA9PlxuICAgIGFzeW5jIChhcmdzOiBJbml0aWFsaXplSGFuZGxlckFyZ3VtZW50czxhbnk+KTogUHJvbWlzZTxJbml0aWFsaXplSGFuZGxlck91dHB1dDxPdXRwdXQ+PiA9PiB7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgbmV4dCh7IC4uLmFyZ3MgfSk7XG4gICAgICBjb25zdCBvdXRwdXQgPSByZXNwLm91dHB1dCBhcyB1bmtub3duIGFzIFJlY2VpdmVNZXNzYWdlUmVzdWx0O1xuICAgICAgY29uc3QgbWVzc2FnZUlkcyA9IFtdO1xuICAgICAgaWYgKG91dHB1dC5NZXNzYWdlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBvdXRwdXQuTWVzc2FnZXMpIHtcbiAgICAgICAgICBjb25zdCBtZDUgPSBtZXNzYWdlLk1ENU9mQm9keTtcbiAgICAgICAgICBjb25zdCBoYXNoID0gbmV3IG9wdGlvbnMubWQ1KCk7XG4gICAgICAgICAgaGFzaC51cGRhdGUobWVzc2FnZS5Cb2R5IHx8IFwiXCIpO1xuICAgICAgICAgIGlmIChtZDUgIT09IHRvSGV4KGF3YWl0IGhhc2guZGlnZXN0KCkpKSB7XG4gICAgICAgICAgICBtZXNzYWdlSWRzLnB1c2gobWVzc2FnZS5NZXNzYWdlSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1lc3NhZ2VJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIE1ENSBjaGVja3N1bSBvbiBtZXNzYWdlczogXCIgKyBtZXNzYWdlSWRzLmpvaW4oXCIsIFwiKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwO1xuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCByZWNlaXZlTWVzc2FnZU1pZGRsZXdhcmVPcHRpb25zOiBJbml0aWFsaXplSGFuZGxlck9wdGlvbnMgPSB7XG4gIHN0ZXA6IFwiaW5pdGlhbGl6ZVwiLFxuICB0YWdzOiBbXCJWQUxJREFURV9CT0RZX01ENVwiXSxcbiAgbmFtZTogXCJyZWNlaXZlTWVzc2FnZU1pZGRsZXdhcmVcIixcbiAgb3ZlcnJpZGU6IHRydWUsXG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmVjZWl2ZU1lc3NhZ2VQbHVnaW4gPSAoY29uZmlnOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBQbHVnZ2FibGU8YW55LCBhbnk+ID0+ICh7XG4gIGFwcGx5VG9TdGFjazogKGNsaWVudFN0YWNrKSA9PiB7XG4gICAgY2xpZW50U3RhY2suYWRkKHJlY2VpdmVNZXNzYWdlTWlkZGxld2FyZShjb25maWcpLCByZWNlaXZlTWVzc2FnZU1pZGRsZXdhcmVPcHRpb25zKTtcbiAgfSxcbn0pO1xuIl19